(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{62:function(e,a,t){"use strict";t.r(a);var n=t(0),r=function(e){var a,t,n,r,s,i,o=(n=void 0,r="You can't change a promise",s="javascript",i="programming",(a={}).type=t="post",a.internal=n,a.contentType="markdown",a.slug="promise-me",a.content=n,a.createdAt=new Date(16197408e5),a.updatedAt=new Date(1665130076893),a.layout=t,a.title=r,a.date="2021-04-30",a.tags=[s,i],a.markdownHeadings=[{text:r,slug:"you-cant-change-a-promise",level:1},{text:"What did I 'understand'?",slug:"what-did-i-understand",level:2},{text:"Promises again",slug:"promises-again",level:2},{text:"Firstly a bug",slug:"firstly-a-bug",level:3},{text:"Secondly, an opportunity",slug:"secondly-an-opportunity",level:3}],a.excerpt="<p>I've recently understood JavaScript promises and thus realised\nI hadn't understood them the past few years that I have spent\nas a 'professional' JavaScript developer.</p>\n",a.permalink="/posts/promise-me.html",a.assets={},a.attributes=a,a.tagsInfo=[{name:s,permalink:"/tags/javascript"},{name:i,permalink:"/tags/programming"}],a),h=e.options.beforeCreate||[];e.options.beforeCreate=[function(){this.$page=o}].concat(h);["layout","transition"].forEach((function(a){var t=e.options.PageComponent;t&&(e.options[a]=t[a]),void 0===e.options[a]&&(e.options[a]=o[a])})),o.slug&&(e.options.name="page-wrapper-"+o.slug.replace(/[^0-9a-z\-]/gi,"-"))},s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("layout-manager",[t("h1",{attrs:{id:"you-cant-change-a-promise"}},[e._v("You can't change a promise")]),e._v(" "),t("p",[e._v("I've recently understood JavaScript promises and thus realised\nI hadn't understood them the past few years that I have spent\nas a 'professional' JavaScript developer.")]),e._v(" "),t("p",[e._v("I'm unsure whether I now understand promises as well as the average\nJavaScript developer, or if the average JavaScript developer doesn't\nunderstand promises. Figuring that out is left as an exercise for the reader.")]),e._v(" "),t("h2",{attrs:{id:"what-did-i-understand"}},[e._v("What did I 'understand'?")]),e._v(" "),t("p",[e._v("What I've understood is that promises are immutable.\nI think I already 'knew' this - but did not understand the implications of it.")]),e._v(" "),t("p",[e._v("So what does it mean for a promise to be 'immutable'.\nIt means it cannot be changed. An example of this in JavaScript\nis the humble string. You can never change a string.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("const myString = \"hello\";\n\nconsole.log(myString.split(\"e\")); // ['h', 'llo']\n\nconsole.log(myString); // 'hello'")])])]),t("p",[e._v("I can call methods on my string that will return a something new and different,\nbut they don't change the string that I had to begin with.\nThe same is not true for most other JavaScript entities.")]),e._v(" "),t("p",[e._v("Take an array, for example.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("const myArray = [1, 2, 3, 4];\n\nmyArray.push(5);\n\nconsole.log(myArray); // [1,2,3,4,5]")])])]),t("p",[e._v("I can push new elements to my array, and the original array changes. It is\n'mutable'.")]),e._v(" "),t("h2",{attrs:{id:"promises-again"}},[e._v("Promises again")]),e._v(" "),t("p",[e._v("So, as I said before. Promises "),t("em",[e._v("are immutable")]),e._v(". But if you use them\nin the way that I have generally used them you might never have noticed this.")]),e._v(" "),t("p",[e._v("Typically when we use promises we do things like this.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("makeRequest()\n  .then(data => doSomethingWithData(data))\n  .catch(err => doSomethingWithError(err));\n\n// or in a more up to date way\n\ntry {\n  const data = await makeRequest();\n  doSomethingWithData(data);\n} catch (err) {\n  doSomethingWithError(err);\n}")])])]),t("p",[e._v("It's quite rare that we hold onto our original promise and\ninteract with it multiple times, so whether "),t("code",{pre:!0},[e._v(".then")]),e._v(" and "),t("code",{pre:!0},[e._v(".catch")]),e._v("\nmutate the original promise is largely irrelevant to us.")]),e._v(" "),t("p",[e._v("But the fact remains that "),t("code",{pre:!0},[e._v(".catch")]),e._v(" and "),t("code",{pre:!0},[e._v(".then")]),e._v(" do not mutate the original\npromise. Both return a new promise. So what are the implications of that?")]),e._v(" "),t("h3",{attrs:{id:"firstly-a-bug"}},[e._v("Firstly a bug")]),e._v(" "),t("p",[e._v("There's a bug you can very easily introduce! Take a look at this")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("const myPromise = makeRequest()\n\nmyPromise.catch(err => doSomethingWithError(err))\n\nmyPromise.then(data => doSomethingWithData(data))")])])]),t("p",[e._v("Do you see the issue?")]),e._v(" "),t("p",[e._v("We are trying to catch errors that might be thrown when making a request for\ndata, but calling "),t("code",{pre:!0},[e._v(".catch")]),e._v(" creates a new promise. Because we then call "),t("code",{pre:!0},[e._v(".then")]),e._v("\non the original promise, our attempts to catch the error is in vain.")]),e._v(" "),t("p",[e._v("What we really need to write was this")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("const myPromise = makeRequest();\n\nconst myCaughtPromise = myPromise.catch(err => doSomethingWithError(err));\n\nmyCaughtPromise.then(data => doSomethingWithData(data));")])])]),t("h3",{attrs:{id:"secondly-an-opportunity"}},[e._v("Secondly, an opportunity")]),e._v(" "),t("p",[e._v("If calling "),t("code",{pre:!0},[e._v(".then")]),e._v(" makes a new promise, and does not change the original promise\nthis means that we are not constrained in how many promises we can create.\nFrom one original promise we can make as many promises as we want. Hundreds.\nThousands.")]),e._v(" "),t("p",[e._v("But why?")]),e._v(" "),t("p",[e._v("Perhaps we want to wait for our promise to resolve in different places, for different\nreasons. And perhaps in these places we want to transform our data in different\nways. We may find ourselves in the awkward position of trying to control various\ncombinations of transformed and non-transformed data through our code base.")]),e._v(" "),t("p",[e._v("We would need to make sure that each .then is returning the data in a\nformat that the next .then in the chain can handle. And if we want to\nget the data transformed in two different formats we might end up\ndoing something like this.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("makeRequest()\n  .then(data => {\n    const transformedData = transform(data)\n    return { data, transformedData\n  }})\n  .then(({ data, transformedData }) => {\n    const differentlyTransformedData = transformDataDifferently(data)\n    return { data, transformedData, differentlyTransformedData }\n  })\n  .then(/* etc */)")])])]),t("p",[e._v("Hideous.")]),e._v(" "),t("p",[e._v("Instead, because promises are immutable, we can just chain "),t("code",{pre:!0},[e._v(".then")]),e._v("\non the original promise several times.")]),e._v(" "),t("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[t("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("const request = makeRequest()\n\nrequest.then(data => transform(data))\n\nrequest.then(data => transformDataDifferently(data))\n\n// etc")])])]),t("p",[e._v("Slightly less hideous!")]),e._v(" "),t("p",[e._v("So In summary, despite having 'knowing' that promises were immutable, I\nsort of believed and acted like they were mutable. I thought that calling\n"),t("code",{pre:!0},[e._v(".then")]),e._v(" on a promise was changing that promise and then returning it.\nThis is not actually the case.\nYou can await or .then a promise as many times as you like without\nmaking any change to the original promise.")]),e._v(" "),t("p",[e._v("This might be quite obvious to other people who've worked with\npromises, but is something that I had somehow missed entirely. When\nI realised that promises work like this it felt like a minor\nrevelation.")]),e._v(" "),t("p",[e._v("Ok.")])])}),[],!1,null,null,null);"function"==typeof r&&r(s);a.default=s.exports}}]);
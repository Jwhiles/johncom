(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{102:function(e,t,a){"use strict";a.r(t);var n=a(0),s=function(e){var t,a,n,s,i,l,o,r,m,g,p,u,c,h,d,w,f=(t=void 0,a="post",n="/tags/data-structures",s="The Beatles",i="Weightlifting",l="Christmas Music",o="data structures",r={},m=new Date(1656787246458),g={},p="markdown",u="Rust",c="Data Structures",h={},d="functional programming",w="trees",r.type="page",r.internal=t,r.contentType="default",r.isTagPage=!0,r.layout="tag",r.permalink=n,r.slug="data-structures",r.createdAt=m,r.updatedAt=m,r.posts=[g,h],r.pagination={hasPrev:!1,hasNext:!1,total:1,current:1,prevLink:"/tags/data-structures/page/2",nextLink:t},r.tag=o,r.assets={},r.attributes=r,r.content=t,g.type=a,g.internal=t,g.contentType=p,g.slug="week-notes-one",g.content=t,g.createdAt=new Date(16386624e5),g.updatedAt=new Date(1656787202897),g.layout=a,g.title="Some stuff I did this week",g.date="2021-12-05",g.tags=[s,u,c,i,l],g.markdownHeadings=[{text:"What I've been up to recently",slug:"what-ive-been-up-to-recently",level:1},{text:"Data Alignment",slug:"data-alignment",level:2},{text:s,slug:"the-beatles",level:2},{text:i,slug:"weightlifting",level:2},{text:"Hash Maps",slug:"hash-maps",level:2},{text:l,slug:"christmas-music",level:2}],g.excerpt="<p>Hey! Long time no see. Anyway, here's some stuff from the past week or so.</p>\n",g.permalink="/posts/week-notes-one.html",g.assets={},g.attributes=g,g.tagsInfo=[{name:s,permalink:"/tags/the-beatles"},{name:u,permalink:"/tags/rust"},{name:c,permalink:n},{name:i,permalink:"/tags/weightlifting"},{name:l,permalink:"/tags/christmas-music"}],h.type=a,h.internal=t,h.contentType=p,h.slug="implementing-a-trie",h.content=t,h.createdAt=new Date(15742944e5),h.updatedAt=new Date(1656787202893),h.layout=a,h.title="Tries company",h.date="2019-11-21",h.tags=[d,o,w],h.markdownHeadings=[{text:"Implementing a Trie in Haskell",slug:"implementing-a-trie-in-haskell",level:1},{text:"What is a Trie?",slug:"what-is-a-trie",level:2},{text:"How to implement a Trie?",slug:"how-to-implement-a-trie",level:2},{text:"A Tree",slug:"a-tree",level:3},{text:"A Trie",slug:"a-trie",level:3},{text:"My Biggest mistake",slug:"my-biggest-mistake",level:2},{text:"Fixing my biggest mistake",slug:"fixing-my-biggest-mistake",level:2},{text:"What's in it?",slug:"whats-in-it",level:2},{text:"Conclusion",slug:"conclusion",level:2}],h.excerpt="<p>Once upon a time (five months ago) I was doing a phone screening for a <em>tech job</em>. To my horror, I was asked to\nname a Tree that wasn't a binary search Tree. Being a complete philistine, I had no answer. I was rejected on\nthe spot. From that day on I have made it my mission to learn about every variation of a Tree that can be\nimplemented with a small amount of effort in Haskell.</p>\n",h.permalink="/posts/implementing-a-trie.html",h.assets={},h.attributes=h,h.tagsInfo=[{name:d,permalink:"/tags/functional-programming"},{name:o,permalink:n},{name:w,permalink:"/tags/trees"}],r),k=e.options.beforeCreate||[];e.options.beforeCreate=[function(){this.$page=f}].concat(k);["layout","transition"].forEach((function(t){var a=e.options.PageComponent;a&&(e.options[t]=a[t]),void 0===e.options[t]&&(e.options[t]=f[t])})),f.slug&&(e.options.name="page-wrapper-"+f.slug.replace(/[^0-9a-z\-]/gi,"-"))},i=Object(n.a)({},(function(){var e=this.$createElement;return(this._self._c||e)("layout-manager")}),[],!1,null,null,null);"function"==typeof s&&s(i);t.default=i.exports}}]);
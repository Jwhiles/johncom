datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id             String   @id @default(cuid())
  title          String
  draft          Boolean  @default(true)
  slug           String   @unique
  body           String
  date           DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  author   Admin  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  tags     Tag[]
  comments Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  authorEmail String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  emailConfirmed Boolean @default(false)
  approved       Boolean @default(false)

  content String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  responses    Comment[] @relation("responseTo")
  responseTo   Comment?  @relation(name: "responseTo", fields: [responseToId], references: [id], onUpdate: Cascade)
  responseToId String?
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  Password?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  notes Note[]
  posts Post[]
}

model Password {
  hash String

  admin   Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId String @unique
}

model Webmention {
  target String
  source String

  authorName  String?
  authorPhoto String?
  authorUrl   String

  wmProperty  String
  contentText String?
  publishedAt DateTime?

  raw String

  approved Boolean @default(false)

  @@id([target, source])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
}

model Note {
  id          String @id @default(cuid())
  createdBy   Admin  @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inReplyToTitle  String?
  inReplyToUrl    String?
  inReplyToAuthor String?

  content String
}

model Summary {
  id          String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  title String @unique
  content String
}
